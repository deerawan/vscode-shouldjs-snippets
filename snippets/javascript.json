{
  "Bool#false": {
    "prefix": "shfalse",
    "body": "$1.should.be.false();",
    "description": "Should.js Assertion#false. Assert given object is exactly false."
  },
  "Bool#falseNot": {
    "prefix": "shnotfalse",
    "body": "$1.should.not.be.false();",
    "description": "Should.js Assertion#false (NOT)."
  },
  "Bool#ok": {
    "prefix": "shok",
    "body": "$1.should.be.ok();",
    "description": "Should.js Assertion#ok. Assert given object is thuthy according javascript type conversions."
  },
  "Bool#okNot": {
    "prefix": "shnotok",
    "body": "$1.should.not.be.ok();",
    "description": "Should.js Assertion#ok (NOT)."
  },
  "Bool#true": {
    "prefix": "shtrue",
    "body": "$1.should.be.true();",
    "description": "Should.js Assertion#true. Assert given object is exactly true."
  },
  "Bool#trueNot": {
    "prefix": "shnottrue",
    "body": "$1.should.not.be.true();",
    "description": "Should.js Assertion#true (NOT)."
  },
  "Contain#containDeep": {
    "prefix": "shcd",
    "body": "$1.should.containDeep($2);",
    "description": "Should.js Assertion#containDeep. Deep object equality comparison."
  },
  "Contain#containDeepOrdered": {
    "prefix": "shcdo",
    "body": "$1.should.containDeepOrdered($2);",
    "description": "Should.js Assertion#containDeepOrdered. Assert that given object is contain equally structured object on the same depth level."
  },
  "Contain#containEql": {
    "prefix": "shceql",
    "body": "$1.should.containEql($2);",
    "description": "Should.js Assertion#containEql. Assert that given object contain something that equal to other."
  },
  "Equality#eql": {
    "prefix": "sheql",
    "body": "$1.should.be.eql($2);",
    "description": "Should.js Assertion#eql. Deep object equality comparison."
  },
  "Equality#eqlNot": {
    "prefix": "shnoteql",
    "body": "$1.should.not.be.eql($2);",
    "description": "Should.js Assertion#eql (NOT). Deep object equality comparison."
  },
  "Equality#equal": {
    "prefix": "shequal",
    "body": "$1.should.be.equal($2);",
    "description": "Should.js Assertion#equal. Exact comparison using ===."
  },
  "Equality#oneOf": {
    "prefix": "shone",
    "body": "$1.should.be.oneOf($2)",
    "description": "Should.js Assertion#oneOf. Exact comparison using .eql to be one of supplied objects."
  },
  "Equality#equalOneOf": {
    "prefix": "shequalone",
    "body": "$1.should.be.equalOneOf($2)",
    "description": "Should.js Assertion#equalOneOf. Exact comparison using === to be one of supplied objects."
  },
  "Equality#exactly": {
    "prefix": "shex",
    "body": "$1.should.be.exactly($2);",
    "description": "Should.js Assertion#exactly. Aliases Assertion#equal."
  },
  "Number#Infinity": {
    "prefix": "shinf",
    "body": "$1.should.be.Infinity($2);",
    "description": "Should.js Assertion#Infinity. Assert given object is not finite (positive or negative)."
  },
  "Number#InfinityNot": {
    "prefix": "shnotinf",
    "body": "$1.should.not.be.Infinity($2);",
    "description": "Should.js Assertion#Infinity (NOT)."
  },
  "Number#NaN": {
    "prefix": "shnan",
    "body": "$1.should.be.NaN($2);",
    "description": "Should.js Assertion#NaN. Assert given object is NaN."
  },
  "Number#NaNNot": {
    "prefix": "shnotnan",
    "body": "$1.should.not.be.NaN($2);",
    "description": "Should.js Assertion#NaN (NOT)."
  },
  "Number#above": {
    "prefix": "shabv",
    "body": "$1.should.be.above($2);",
    "description": "Should.js Assertion#above. Assert given number above n."
  },
  "Number#aboveOrEqual": {
    "prefix": "shabveql",
    "body": "$1.should.be.aboveOrEqual($2);",
    "description": "Should.js Assertion#aboveOrEqual. Assert given number above n."
  },
  "Number#approximately": {
    "prefix": "shapprox",
    "body": "$1.should.be.approximately($2, $3);",
    "description": "Should.js Assertion#approximately. Assert given number near some other value within delta."
  },
  "Number#below": {
    "prefix": "shblw",
    "body": "$1.should.be.below($2);",
    "description": "Should.js Assertion#below. Assert given number below n."
  },
  "Number#belowOrEqual": {
    "prefix": "shblweql",
    "body": "$1.should.be.belowOrEqual($2);",
    "description": "Should.js Assertion#belowOrEqual. Assert given number below n."
  },
  "Number#within": {
    "prefix": "shwith",
    "body": "$1.should.be.within($2, $3);",
    "description": "Should.js Assertion#within. Assert given number between start and finish or equal one of them."
  }
}